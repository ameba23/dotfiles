#!/bin/zsh
# mpclocal - play a file using mpc, even if its not in the database.  without clearing the playlist
# mpc will recursively 
#
# ameba -april 17
#      
#

# needs trailing /
mpddir="/home/potatoe/Musique/"

# Escape special characters in the path so we can use it in a regular expression with sed:
# this seems to work perfectly, but it messes up the syntax highlighting for the rest of the script:
escapedmpddir=$((echo $mpddir | sed -r 's/([\$\.\*\/\[\\^])/\\\1/g' | sed 's/[]]/\[]]/g') >&1 ) 


function test_firstfile {
    # play, starting from the first file we added
    if [[ $firstfile = 1 ]]
    then 
      firstfile=0
      mpc play $tracknum
    fi
}

function usage_info {

  echo " mpclocal - play a file using mpc, even if its not in the mpc database.  without clearing the playlist"
  echo " if directories are passed, they will be expanded recursively"
  echo " Usage: mpclocal file(s)"

}


inputFiles=( )
while (( $# )); do
  inputFiles+=( "$1" )
  shift
done

firstfile=1
  
# find the position in the mpd playlist to startplaying from:
tracknum=$(echo $(mpc playlist | wc -l) + 1 | bc)

# loop over the input files and process each one
for var in "${inputFiles[@]}"; do
  echo "$var"

    # test if it is within the mpd database directory:
    if [[ $(readlink -f $var) = $mpddir* ]]; then
      echo "**** in the music"

      # trim the path so that it becomes relative to the music directory
      fname=$(echo $(readlink -f $var) | sed "s/^"$escapedmpddir"//g")
      
      mpc add $fname
      test_firstfile
    
    else   
      echo " NOT in the music"
    
      # test is argument is a directory or a file
      if [ -d "$var" ]; then

        # if its a directory, use find to recursively add the files within it 
        find $var -type f -exec mpc add "file:///$(readlink -f '{}')" \;
        test_firstfile
      
      elif [ -f "$var" ]; then

        mpc add "file:///$(readlink -f $var)"
        test_firstfile
     
      fi
    fi
done



# test if arguments were passed
#if [ -z "$*" ]; then
#  usage_info
#else

#  filelist="$@"
  

