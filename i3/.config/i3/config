# amebas i3 config
#
# Should you change your keyboard layout some time, delete
# this file and re-run i3-config-wizard(1).
#

# i3 config file (v4)
#
# Please see http://i3wm.org/docs/userguide.html for a complete reference!

set $mod Mod4

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
#font pango:monospace 10

# This font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
font xft:Bitstream Sans Mono Bold 10

# Before i3 v4.8, we used to recommend this one as the default:
#font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1
# The font above is very space-efficient, that is, it looks good, sharp and
# clear in small sizes. However, its unicode glyph coverage is limited, the old
# X core fonts rendering does not support right-to-left and this being a bitmap
# font, it doesn’t scale on retina/hidpi displays.

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# start a terminal
bindsym $mod+Return workspace $tag1; exec i3-sensible-terminal

# kill focused window
bindsym $mod+Shift+q kill

# start dmenu (a program launcher)
bindsym $mod+d exec dmenu_run
# There also is the (new) i3-dmenu-desktop which only displays applications
# shipping a .desktop file. It is a wrapper around dmenu, so you need that
# installed.
# bindsym $mod+d exec --no-startup-id i3-dmenu-desktop

# change focus
bindsym $mod+j focus left
bindsym $mod+k focus down
bindsym $mod+l focus up
bindsym $mod+semicolon focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+j move left
bindsym $mod+Shift+k move down
bindsym $mod+Shift+l move up
bindsym $mod+Shift+semicolon move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# split in horizontal orientation
bindsym $mod+h split h

# split in vertical orientation
bindsym $mod+v split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
bindsym $mod+Shift+a focus child

# ------------------------workspace names:
set $tag1 "1:term"
set $tag2 "2:www"
set $tag3 "3:mutt"
set $tag4 "4:todo"
set $tag5 "5:mpc"


# --------------------------------assign programs to workspaces:
assign [class="Firefox"] $tag2
assign [class="Vimb"] $tag2
assign [class="Evopedia"] $tag2

#assign [class="URxvt"] $tag1
assign [instance="urxvt"] $tag1

assign [instance="mutt"] $tag3
assign [instance="offlineimap"] $tag3

assign [instance="todo"] $tag4
assign [instance="ncmpcpp"] $tag5

#----------------------------------------
# switch to workspace - this also runs the programs assigned to the workspaces if they are not already running
bindsym $mod+1 workspace $tag1
bindsym $mod+2 workspace $tag2
bindsym $mod+3 workspace $tag3 exec "ps -ef | grep -v grep | grep -- '-name offlineimap' || urxvt -name offlineimap" exec "pgrep mutt || urxvt -name mutt -e mutt" exec "i3-msg layout tabbed"
bindsym $mod+4 workspace $tag4 exec "ps -ef | grep -v grep | grep -- '-name todo' || urxvt -name todo -e vim ~/Documents/todo.md"
bindsym $mod+5 workspace $tag5 exec "pgrep ncmpcpp || urxvt -name ncmpcpp -e ncmpcpp"
bindsym $mod+6 workspace 6
bindsym $mod+7 workspace 7
bindsym $mod+8 workspace 8
bindsym $mod+9 workspace 9
bindsym $mod+0 workspace 10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace $tag1
bindsym $mod+Shift+2 move container to workspace $tag2
bindsym $mod+Shift+3 move container to workspace $tag3
bindsym $mod+Shift+4 move container to workspace $tag4
bindsym $mod+Shift+5 move container to workspace $tag5
bindsym $mod+Shift+6 move container to workspace 6
bindsym $mod+Shift+7 move container to workspace 7
bindsym $mod+Shift+8 move container to workspace 8
bindsym $mod+Shift+9 move container to workspace 9
bindsym $mod+Shift+0 move container to workspace 10

# reload the configuration file
bindsym $mod+Shift+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym j resize shrink width 10 px or 10 ppt
        bindsym k resize grow height 10 px or 10 ppt
        bindsym l resize shrink height 10 px or 10 ppt
        bindsym semicolon resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

bindsym $mod+r mode "resize"

# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
        #tray_output primary
        #tray_output VGA1
        tray_padding 0
        status_command i3status
}

# -------------------------------------startup 
#xfce4-volumed & 
exec --no-startup-id xfce4-power-manager 

#---------------display wallpaper
#exec --no-startup-id nitrogen --restore
#exec --no-startup-id feh --bg-scale ~/photos/ant_kodak_camera/100_8698.JPG 
exec --no-startup-id feh --bg-scale ~/Images/double_planetoid.jpg 

#gxkb &

exec --no-startup-id udiskie

# start mpd
exec --no-startup-id mpd

# display resolutions
exec --no-startup-id xrandr --auto --output VGA1 --mode 1280x1024 --left-of eDP1 --output eDP1 --mode 1366x768 &

# ranger, mutt, ncmpcpp, todolist
#exec --no-startup-id "urxvt -name mutt -e mutt"
#exec --no-startup-id "urxvt -name offlineimap"

exec "i3-msg layout tabbed"
#exec --no-startup-id "urxvt -name todo -e vim ~/Documents/todo.md"
#exec --no-startup-id "urxvt -name ncmpcpp -e ncmpcpp"

#will be load layout:
#exec --no-startup-id "i3-msg 'workspace 1; append_layout /home/michael/.i3/workspace-1.json'"


# ---------------------------ameba keybindings:
#
# printscreen = screenshot
bindsym Print exec scrot -e 'notify-send "screenshot taken"' 
# alt and printscreen = grab only active window ---doesnt work, what should 'alt' be?
#bindsym Mod1+Sysreq exec scrot -u

#volume/mute keys on laptop:
bindsym XF86AudioRaiseVolume exec amixer -c 0 set Master 2%+ unmute
bindsym XF86AudioLowerVolume exec amixer -c 0 set Master 2%- unmute
bindsym XF86AudioMute exec amixer -c 0 set Master 1+ toggle

# i use this after i unplug monitor and im stuck without a terminal
bindsym $mod+m exec xrandr --auto

#pause mpd
bindsym $mod+p exec "mpc toggle"
#bindsym $mod+period exec "mpc toggle"

# change track mpd
bindsym $mod+comma exec mpc prev && exec notify-send "`mpc`"
bindsym $mod+period exec mpc next && exec notify-send "`mpc`"
# whats this song called?  - display mpd track name etc
bindsym $mod+Ctrl+m exec notify-send "`mpc`"

# script to toggle between german and US keyboard layout
bindsym $mod+Ctrl+k exec ~/dotfiles/togglekb.sh

# script to permanently toggle images on/off in vimb
bindsym $mod+Ctrl+i exec "python2.7 ~/dotfiles/toggleimagesvimb.py"


# Cycle through active workspaces (similar to alt+tab)
bindsym $mod+Tab workspace next
bindsym $mod+Shift+Tab workspace prev

# Toggle between current workspace and the previous one 
bindsym $mod+z workspace back_and_forth
bindsym $mod+Shift+z move container to workspace back_and_forth; workspace back_and_forth

# move workspace to left and right monitors
bindsym $mod+Shift+bracketleft move workspace to output left
bindsym $mod+Shift+bracketright move workspace to output right

# scratchpad -very useful
bindsym $mod+Shift+s scratchpad show
bindsym $mod+Ctrl+s move window to scratchpad

# i like this option but it messes with keybindings which change workspace
workspace_auto_back_and_forth no
