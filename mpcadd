#!/bin/zsh
# mpcadd - play a file using mpc, even if its not in the database.  without clearing the playlist
# mpc will recursively 
#
# ameba -april 17
#      
#

# needs trailing /
mpddir="/home/potatoe/Musique/"

# Escape special characters in the path so we can use it in a regular expression with sed:
# this seems to work perfectly, but it messes up the syntax highlighting for the rest of the script:
escapedmpddir=$((echo $mpddir | sed -r 's/([\$\.\*\/\[\\^])/\\\1/g' | sed 's/[]]/\[]]/g') >&1 ) 


#function test_firstfile {
# play, starting from the first file we added
#    if [ $firstfile = 1 ]
#    then 
#      firstfile=0
#      mpc play $tracknum
#    fi
#}

function usage_info {

  echo " mpcadd - add a file to mpc playlist, even if its not in the mpc database.  without clearing the playlist"
  echo " if directories are passed, they will be expanded recursively"
  echo " Usage: mpclocal file(s)"

}

# test if arguments were passed
if [ -z "$*" ]; then
  usage_info
else

  filelist="$@"
  #  firstfile=1

  # find the position in the mpd playlist to startplaying from:
  tracknum=$(echo $(mpc playlist | wc -l) + 1 | bc)

  for var in $filelist
  do

    echo "."$var"." >> /home/potatoe/logfile.txt
    # test if it is within the mpd database directory:
    if [[ $(readlink -f $var) = $mpddir* ]]; then
      #     echo "**** in the music"

      # trim the path so that it becomes relative to the music directory
      fname=$(echo $(readlink -f $var) | sed "s/^"$escapedmpddir"//g")

      mpc add $fname
      #      test_firstfile

    else   
      #      echo " NOT in the music"

      # test is argument is a directory or a file
      if [ -d "$var" ]; then

        # if its a directory, use find to recursively add the files within it 
        find $var -name '*.*' -exec mpc add "file:///$(readlink -f '{}')" \;
        #        test_firstfile
        #echo $var >> /home/potatoe/logfile.txt
      elif [ -f "$var" ]; then

        mpc add "file:///$(readlink -f $var)"
        #        test_firstfile

      fi
    fi
  done
fi

